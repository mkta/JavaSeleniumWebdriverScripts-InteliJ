<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="RF Services Test - Contacts" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Contacts" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1473160502000</longProp>
        <longProp name="ThreadGroup.end_time">1473160502000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Settings - Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ENV" elementType="Argument">
              <stringProp name="Argument.name">ENV</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">dev or test</stringProp>
            </elementProp>
            <elementProp name="------------------------------------------" elementType="Argument">
              <stringProp name="Argument.name">------------------------------------------</stringProp>
              <stringProp name="Argument.value">------------------------------------------</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">vn-84-vly</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">test1234</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="------------------------------------------" elementType="Argument">
              <stringProp name="Argument.name">------------------------------------------</stringProp>
              <stringProp name="Argument.value">------------------------------------------</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testIBAN" elementType="Argument">
              <stringProp name="Argument.name">testIBAN</stringProp>
              <stringProp name="Argument.value">RO49 AAAA 1B31 0075 9384 0000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="------------------------------------------" elementType="Argument">
              <stringProp name="Argument.name">------------------------------------------</stringProp>
              <stringProp name="Argument.value">------------------------------------------</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="filePath" elementType="Argument">
              <stringProp name="Argument.name">filePath</stringProp>
              <stringProp name="Argument.value">C:\Users\gfleancu\Google Drive\Jmeter\Tests\IMG_0004.PNG</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="------------------------------------------" elementType="Argument">
              <stringProp name="Argument.name">------------------------------------------</stringProp>
              <stringProp name="Argument.value">------------------------------------------</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="img2" elementType="Argument">
              <stringProp name="Argument.name">img2</stringProp>
              <stringProp name="Argument.value">������&#x10;JFIF��&#x1;&#x1;����&#x1;��&#x1;��������C��(&#x1c;&#x1e;#&#x1e;&#x19;(#!#-+(0&lt;dA&lt;77&lt;{X]Id�����������à�ڭ��������������������������C&#x1;+--&lt;5&lt;vAAv�������������������������������������������������������&#x11;&#x8;&#x1;,&#x1;,&#x3;&#x1;&quot;��&#x2;&#x11;&#x1;&#x3;&#x11;&#x1;����&#x1a;��&#x1;��&#x3;&#x1;&#x1;&#x1;����������������������&#x4;&#x5;&#x6;&#x3;&#x2;&#x1;����B&#x10;��&#x1;&#x3;&#x2;&#x1;&#x5;&#xc;&#x7;&#x6;&#x6;&#x3;&#x1;��������&#x1;��&#x2;&#x3;&#x4;&#x11;&#x5;&#x12;&#x15;!1�&#x14;4AQSaqr����&#x13;&quot;235Ts&#x6;R����#Bd���%b�$����&#x14;&#x1;&#x1;������������������������������������&#x14;&#x11;&#x1;������������������������������������&#xc;&#x3;&#x1;��&#x2;&#x11;&#x3;&#x11;��?���DD&#x4;D@DD&#x4;D@DD&#x4;D@DD&#x4;D@DD&#x4;D@DD&#x4;D@DD&#x4;D@DD&#x4;D@DD&#x4;D@DD&#x4;DAƪ����Y&#x3;�ooWZ��)�9�&#x6;��&#x1b;�y�&#x5;�A�ϔܜ݃jg�nNnug�&#x6;�&gt;Srsv��)�9�&#x6;՟D&#x1a;&#xc;�M���6�|����&#x1b;V}&#x10;l&quot;�K&#x13;$h =����%F+&#x5;4�쐹����[U�Ԋ-�&#x7;�o������&#x13;������Ag�)�9�&#x6;�ϔܜ݃jϢ&#x6;|����&#x1b;S&gt;Srsv�&gt;�4&#x19;򛓛�mL�M���6�� ٢.u&#x13;2�&#x17;J�M&#x1d;�&#x13;M&#x1c;&#xc;/��&#x1c;j�lu��&#x18;���l���d���!�&#x1c;��.&#x8;-&#xe;9S�&#x1c;]�j��v{��DG5ǚ�D&#x1a;|j	&#x8;&#x12;��x�d�&#x7;49�&#x10;u&#x10;��m&#x5;{�$�������&#x10;i�J�B*7��5�\d��Jk��&#x1c;�v�pU&apos;�&#xf;&#x7f;&#xf;T�)�9�&#x6;�ϔܜ݃jϢ&#x6;|����&#x1b;S&gt;Srsv�&gt;�4&#x19;򛓛�mL�M���6�� �E�S�+#k%&#x5;�&#x17;&#x3;��V+&apos;E�`��Z�&#x4;D@DD&#x1c;�:��&#x1c;��m�k�G�4\�}�T�A&#xf;4�r&#x1d;�mU8�44���Y�&#x1c;�N�|V�Q����O��q��S�ҹ�G���&#x1;�#E��Z&#xc;&#x7;y?�&#x1f;����i��;�ڙ����j��&lt;����cE��`9�o&#x17;�ߗ�B�,�/�9�/�&#x10;������&apos;�+��&#x4;���g���xA�&#x8;9�.C��h�&#xe;�&#x1e;i��;�ڙ����j���&#x1f;���&#x10;�Iq��W����&gt;�&#x13;�ZPT+�+�H��++�i�nuJ�&#x18;MtN�d&#xf;xl��c��,&#x1b;&#x14;m&#x16;k&#x1a;&#x7;&#x10;&#xb;Ĵ�L&#x8;�&amp;���{WdA�Ĩw&#x1c;���&#x1b;��s(+YWI&#x1d;db9&#xb;�&#x6;�n�&#xf;1�r�v��=`�&#x19;(�&#xe;��o�J������G�@��G��GE&#x1d;&#x18;x��9V�QJ&#x8;y����jf�.C��b �V�ث%���k�&#x2;��b_&#x10;�����Sa��R��Cw9���uۥu�4\�}�Wj-�&#x7;�o��#0�8�&#x5f6;&#x1b;9�&#x10;r���-&#x11;&#x1;&#x11;&#x10;&#x11;&#x11;&#x1;&#x11;&#x10;&#x15;&#x1f;�&#xf;&#x7f;&#xf;T��G����&gt;(*&#x16;�&#x1;�O��,��`;����P�&#x4;&#x16;h���8�����&#x16;�fq&#x7f;���&#x7f;� ��6���l�5�����\T��ڹ#k�&#x15;��pr��&#x1c;�eO����nʟ����4��=��L�[��۵&#x7;&#x1d;�S�3~���I斦A$�x&#xc;�&#xe;q&lt;*&#x1e;i��{�ڧ�&#x14;U&#x14;ӽ�G�&#xb;l��An�b��&#x17;|f�q�&#x15;=&#x10;cWŢ��b�q|gѼ��U\�U\W�&#x1e;X�a�샄Uu&#x10;{���8/��L�&#x1b;�f�&#x1a;�&#x7;E��s&#x1c;�g���&#x11;e�&#x6;�,n&#x7;葏��&gt;&#x19;❹QH&#x5ce;b�&#xb;�R�&#x17;����&#xe;&#x10;�^�&#x1e;&#x1b;Z+!����&#x1c;&lt;��&#x4;DA�ľ!?YER�/�O�QPkh��&#x1f;M�&#xb;��E���m�]�&#x11;&#x11;&#x1;&#x11;&#x10;&#x11;&#x11;&#x1;&#x11;&#x10;&#x15;&#x1f;�&#xf;&#x7f;&#xf;T��G����&gt;(*&#x16;�&#x1;�O��,��`;����P�&#x4;&#x16;h���8�����&#x16;�fq&#x7f;���&#x7f;� ��t&#x1b;�&#xe;�YE���&#x10;u&#x2;	&#x8;����&#x8;�;�������&#x7;��&#x6;�&#x16;1ip���F�_&#x5cc;d��&#x2;k�&#x5cb;9�È���ᔒ�4�B��(+��S��bv[&#x6;�&#xe;�&#x15;Z����h�sζ�&#x7;&#x19;+(��&#x6;��&#x10;kx&#x1e;&#x8;&gt;&gt;KF�X;&#xb;�&#x18;�&#x3;nObҠ&quot;&quot;&#xc;�%�	��*��|B~���[E���m�]�&#x1a;-�&#x7;�o�쀈�&#x8;����&#x8;�����{�z��^*�^�z�ct1�&#x6;���&#xf;&#x14;&#x14;+A��&apos;�C�&#x15;fi��{�ڮ0�yi�\ɛ���mptX ���&#xb;3��No��!i�&#x1e;#��O]$�E��k&#x1c;�8&#x7;:�ٵUhkg�&#x1;�&#x7;�&#x2;�ky&#x1e;�v�i��{�ڃ���YM�S�3~��f��G�ݩ�ky&#x1e;�v��*~fo�SvT��߬�٦���jf��G�ݨ/0�9�&#x11;9�.q&#x6;䛝k�/Hj`&#xf;`���&#x3;�p�&#x14;&#x11;&gt;&#x1a;(�d��H�:��&#x1a;�G#�x|n-p�&#x5;_�a1�&#x13;$DG!��UD�uT&apos;օ�q�HA&#x558;�[E���r&#x74b;뱪�,&#xb;&#x1b;�&#x1a;�&#x16;��8&#x10;y��	�&#x10;t�ygvT�9矁rR&quot;�����dX~�ދ&#x7;lDIPC�54j&#x1b;P}�h�1&#x19;�&#x16;{ŀ��&#x11;&#x1;&#x11;&#x10;e�/�O�QU�n&#x1d;W-d�2+�θ9Cj�ky&#x1e;�v��Qo(&gt;�|&#x17;eʙ���&amp;8Y�`&#x4;s�u@DD&#x4;D@DD&#x4;\�*b�ht��&#x4;�&#x1b;&#x12;�gj._��&amp;&quot;����~�&amp;v���؂b.QT�?���&lt;@�]P&#x11;y��7=��h�*.v���؂b/&#x11;Jɣ&#x12;Fn�j6^�&#x11;y�퍎{͚�rT\�E��&#x1d;�&#x4;�^!���$��0�6��C�&#x13;����&#x1c;x�.�b*��M�&amp;�&#x1b;Wh�ZI&#x8;&#x1e;����,�j/�pp&#x5;�&#x10;u&#x10;��&quot;�5}4&#x12;&#x18;�%Ã$�%�;Qr��lA1&#x14;&lt;�E��&#x1d;�3�&#x17;/�v�&#x13;&#x11;C��\�q�&#x17;�qY�&#x11;�.SΡ�G�	(��&#x1;&#x14;9�:H���ǉ��|��v�,�B�&#x15;����&#xb;	���c\&#x1c;&#x1;i&#x4;&#x1d;D �&#x8;����*���&#x1f;_Ȫ&#x5;&#x7f;��X��EP &quot;سݷ�#�&#x5f7;%�&#xe;&#x1c;D]&#x6;A�-p-$&#x11;����k�T�&#x1c;��0k��&#x15;�e5alb�p&#xe;&#x3;�}�&#x1e;[����؂�xO�+(�u��~�YD&#x1a;�/���&#x1f;&#x12;���_á�&gt;%KA»x����kY]�g�n�Y4&#x1a;|#��o&#x12;��m.q�&#x2;�&#x13;&#x8;�d?�Į&#x18;�A���4���&#x8;+�&#x1c;I�N,���8&gt;�J����$�4���~&#x1e;�XÜ�f#I&lt;&#x1c;�&#x6;|R�&#x11;q&#x4;�q�&#x15;Ȃ� �&#x15;�Q�(�����&#x1e;=��a&#x5;&#x5;&#x15;t�rh%ѝl����+&amp;��Fn�&#xb;���7E#�x��lU�&#x3;Pn�rt{M�A&#x17;&#x19;��&#x7;���h�&#x18;��&#x1a;�|~&quot;&#x383;�&#x2;���J.��V�&#x10;|s�Z\�`&#x5;�+;��O�qdd�&#x11;��U�9Pc�lM:d:z&#x2;�������J&#x6;��R�&#x11;q&#x4;�q�&#x15;����R�&#x1c;�1&#x1a;I��j&#xc;i&#x4;&#x1b;&#x10;A�*U&#x15;t�rh%ѝl�������2&#x1e;��x�^5���7E#�x��lPkb��D�#7k���p&#x1a;�wӓ��o��@DD&#x4;DAW��X��EP+�&#x7f;z���*�&#x6;��tM�DZ��GWR��5&#x11;����,� ��U��#A&#x2;&#x37f;&#x12;�0�&#x11;a�h$�[�D�&#x19;&amp;vLLs�&#x10;&#xb;C�P�8�}���n&#x1;ă�~�VQj���B��,)�i��lLde��po��ʞN&#x1e;õx��g�����Uɿ���yH{N�&#x1e;e�*&amp;�����A�;Ur��&#x7;��&apos;���CA&amp;��U�4�G�!��%Vcνc&#x1b;�&#x19;�U�&#x11;��&#x7f;7�Ux�sO&#x1b;&#x7;�A&#x1f;&#xc;`�&#x10;�&#x1d;@߰]j&#x16;g	pn%&#x15;�n?b��&#x8;��;��2����&#xf;���;&apos;&#x11;����.��\����W&#xc;(eb0��&#x14;&#x1a;tDA�ƾ&quot;�_0o����/���]�&#xb;��&#x16;t&#x1f;&#x4;&#x1a;DDAA�:�o��g�Q��	1&#x8;A��&#x5;ԌtZ����Į8K�q(��q�&#x14;&#x1a;dD@Y�m���&#x1f;��|���g��^����Ġ�;&apos;&#x11;����-2�aC+&#x11;���ح:&#x2;&quot; &quot;&quot;�&#x7f;z���*�_���&gt;��T&#x8;5l��,m����&#x2;��^&#x1f;�&#x17;F{��&#x5;�&#x7;ƴ4Y�&#x1;�&#x17;�D&#x11;���B��W_�&apos;�&#x15;�A���&#x1d;&#xf;A�*Z���:&#x1e;��T�&#x1c;+�����M�&#xb;&amp;����&#x7f;��&#x5;�A��&gt;&#x19;&#xf;��*&amp;?	,�`=�T�)xG�!��%H�&amp;�&#xb;�x�\,�&apos;&#x1b;�r5��A&#xb;UMPʘ[#&#xe;�c��,�],��&#x18;�&#x1d;&#x7;����iߕ&#xb;�O&#xf;&#x11;A�^%���_#�Z�rU&#x10;�ꀶLG��j�SY=Q�+�&#x3;P&#x1a;��A�sQR�N���q&#x5;?&#x1;�*�򑡍��*�&#x8;_&lt;�8�w&#x15;���m-;bn��ǌ�3���]�&#xb;��&#x16;t&#x1f;&#x5;�&#x1a;�|~&quot;&#x383;�H��*1�IdS&#x1;���SF�&#x1c;�{}��B�O&#x13;g��&lt;]�&#x16;Yz�Y)&amp;1�:&#xf;&#x1;&#x8;4��&#xc;���0��8�&#x12;�PTKN�^Zxx��1��-�&#x11;�ڂ�Y&#x19;&#xc;e�85�&#x17;%ej�5&#x15;/���:&#x7;&#x10;^�k&apos;�?�y j&#x3;@&#xb;�&#x10;�yDq��(,p&#x18;r�&#x1f;)&#x1a;&#x18;�&#xe;���:f�Ӷ&amp;�:�x��&#x8;��-}&#x1e;퉬�&#x19;&amp;��&#xc;��O����ڹD&#x1f;&#x1a;,�8��9�E�|W��i&#x17;�쪳&#x7;�?����j�&#x10;q��sS�&#x1c;����ֺ숃���h$���im�Uf&#xf;�&#x7f;���� �IO�i�&#xe;VVM���7]�&#x10;s�&#x8;�#ȕ���Uˁ&#x2;o&#xc;�&#xe;&apos;&#xb;���&#x10;Pf:�R&#x1e;ӱu�&#x2;7&#x1e;�an&#x10;�殑&#x7;jXi[h�k�&apos;Y]�&#x10;&#x11;&#x11;&#x5;mn&#x15;��&#xc;��&quot;�&#xb;d��(��Pٽ6]�ѓo5d�&#x8;����&#x4;u&#x11;�J���&quot;yp Mᘁ��&#x7f;�p�u&lt;�=�b�D&#x14;�`F���-�&#x1a;&lt;՝5,4��L��耈�&#x8;����8�UCL&#x1a;f~Hv�&#x4;�.9ڋ��;b�����|�+Z�5�.q����A���\�q�&#x17;�bto6&#x13;��&#x11;�ێ���&#x5;s�)&quot;6��a�p�{\״9�&#xe;&#x7;Q&#x5;}Yz��JɌ�Y�N&#x8; &#x11;�&#x14;&#x11;_�RF�1�Y�6#$��]��&quot;�a|.�h6&amp;�i�Vf�&#x7f;O�&#x1d;���&apos;��&#x8;-&#x11;&#x11;&#x1;E�&#x12;��GF�l�&#x11;�v)K+�����&#x5;�v���ؙڋ��;b��&#x4;҂c��&#x3;��%z�u?-7�(4&#x19;ڋ��;b�O[OR��d� \�!f�&#x1d;O�M��� �*�&#xc;�=��9�p��DD&#x1c;*+ � M&amp;Iv���&#x5;�b�D�&amp;�&#x7f;�v*LR&#x7f;O]!&#x7;�o�?&#x5;&#x6;�&#x14;j	�E&#x1c;o&gt;լ�.S��N/4�o1�ؼVԊZgK��h�+1,��B�&#x1c;\�p�&#x17;���Zl&#x4;��&#x1b;W���I��ΰة���Hܦ��s�&lt;W)�g��9����&#x6;��k�&#x1c;�&#x7;4� �/�/AZ�IA&#x4;�����!�&#x4;&#x1b;��&#x14;&#x1c;j+)�&#x1b;4�$��&#x4;�.Yڋ��;b����]O5Y&#x1c;o��1��&lt;M&#x17;(4�ڋ��;bgj._��?��~Zo�Sq��ߠ��ǉRK#X�n�&#x1b;&#x1;�v)k5EKP��\�%h&#xf;&#x17;%��iP&#x11;&#x11;&#x1;&#x11;&#x10;T}��pt�%[��B&#xe;���A���&gt;J��m�P�rr�M�{]&#x6;�F�cl�3&#x7;�괸s&#x10;�����������J5f--Lf6�Fî�䠮Z�&#x12;]E&#x1;:�&#x7;�ʱ���&#x17;s��Z�Y�dc�Z&#x1b;؃/]����V�&#x6;��y&#x5;Q]����V�&#x6;��y&#x4;&#x16;�����������V�eq&#x1d;���?\���7��&#x7f; �&#x16;F9�&#x11;&#x1c;�`&lt;q&#xb;���YA�E�ݕ?37�*�&#x7;��QeH�=�GK��N\+g��I} h��]�6=&gt;��&#x7;����&#x5;8&#x5;���i$�R�*QI;Z=��&#x7f;&#x1d;G���s��D&gt;����&#xc;��!ˤl�\g�?� ���gI&#x1;:�a���N�m�U&#x1c;������Z�h*���X��ß&#x1c;u�:[&#x6;���&#x7;�h�)�U3�&amp;��&#x7;������?&amp;V&#x16;��&#x14;&#x1a;�A&#x17;&#x6;�2�٢to&#x17;k���E&lt;��^&#x382;�ŌU��9�&#xf;��:f:�R&#x1e;ӱ\���i���&#x17;5�$(T��R�2f�&apos;&#x1e;&#x1b;�&#x7f;�f��&#x1f;�&#x11;u&lt;�&lt;&#xf;&#x7f;���]1��&#x17;S�VG#�vTos&#xf;&#x1b;M��,���YM�S�3~��X��&#x4;�Yg�I+�&#x3;t&#x7;8�&#x15;r���&#x8;����&#x7;����*x&quot;t�6&amp;&#x10;&#x1c;�a}J��&#x7;����*�7�&#x10;u�I�u&lt;�=�b��r}yc&#x3;��_&quot;&#x8;tXl4�(]�}��Ц&quot; �Wo����U�&#x1;�$�ATWo����T�3&#x11;��&#x7;2F����qt��EY�)�9�&#x6;�ϔܜ݃j&#xb;5��w��r�t�l���&#x18;p&#x1;�&gt;��b;�~�Ae�A&#x14;��&#x19;&quot;c�}��,�&#x1d;7���&#x2;��1&#x18;h�{$k�s�ꁵMϔܜ݃j	������&#x1;tdl��1��o&#x13;E��ϔܜ݃j�M��S;bc$&#xe;v��-�r�WO�*䓀�&#xe;��ħ�&#x14;28{N&#x19;#���&#x5;�&#x1;��&#x13;p��D&#x1f;�&#x1c;�:�r��͍	�|N���G���&lt;�U���;&#x13;1���+&#x16;�&#xb;��а�i���?�T&#x15;t�RJ#���.&#xb;u)�&#x14;�3�&#x12;t&lt;\t��� ��h��������&#x1;u�S�r&#x1b;,r_�C�P1�K��(&#x17;�fǠ�jY�M;ef��&#xe;0�E.&#x19;I.�CO�t(s`l �% �?H]��)&#x1e;�\�Fx�I�Iq�F6�s�&lt;��&#xb;x���&#x1b;��ѼY�6+C�L�h@q�c�ǫ&apos;��3�v��u&#x7f;�Bb�&#x5;��K�&#xf;�&#x10;A���]O5�&#x6;��֖�ƽ�&#x4;���v���]O5&#x17;�e%O��8��=T&#x1a;&#x1d;�M����������&#x1;Bϔܜ݃jg�nNnu&#x4;��&quot;Lq1��-h&#xb;��&#x18;�16ț�mVh&#x8;����+q�Y��&#x10;��Y$�H&#x1e;*&#x15;&#x16;&#x1d;W&#x15;dRI&#x15;��rr��~�&#x8;����3�Xm\�R��ݮy �&#xe;&gt;��4��=��ZdA��5��}�S4��=��ZdA&#x7;	����̙�./&amp;�&#x7;E����j嫖FEv��&#x7;(mW�3�ky&#x1e;�v�i��{�ڴȃ3�ky&#x1e;�v�Xn&#x1f;U&#x5;k$�,�&#xb;��&#x3;�ү&#x11;&#x5;^/OST��&#xc;yLn�r����&#x18;eC+#|�䱦��&#x7;O&#x2;�D&#x4;DA]���T��&#xb;r��k^�&#x15;u&gt;&#x1f;]&#x4;�C����v�&#x12; �懴��&#x10;E�*��&#x5;xqu1&#x5;�q�H�U� ʾ���ƞOw�FPU��S�:E�V�&#x10;SQ��8&gt;��&#xf;�&#x1e;j�&#xb;&#xb;&#x4;D&#x15;8�&#x1d;ELѺ&#x18;�m��&lt;U~i��{�ڴȃ3�ky&#x1e;�v�i��{�ڴȃ40��G�{�ڴ��&#x8;����8�T�L�韒	��O�㝨�~�(����Pa۶7���d�[&amp;�h.3�&#x17;/�v�֞���Űɔ@��G���&#x1f;����o�T&#x18;v���yB�ɷ�&#xe;������Kg&#x3;b2&#x1d;��R���7i&#x17;&#x5;S�tv����`�~��&#x6;�h����&#x6;&#x2;��&#x82;Ƣ�b�4�%څ��_i�b�it.���؛&#x11;ⳓ&gt;LB��&#x17;/6h�&#xb;IM&#x3;)�lL�ѯ���,����85���.ƩZ�&#x1;#��v�U_T�ګ6�䱡Z����zf�&#x1f;�n@&#x1d;&#x16;Aڟ&#x11;��pk_�㩮&#x16;*Z��&#x2;��|d�ݣO&#x1;VxES�i�^n�͉�&#x1c;&#x8;:ˈ�E#��[9�&#x8;�;&#x14;�C�#QY|K�&#x13;�/tΨA⢦*f�L�M��+�=T5!�&#x17;�&#x6;��G����X��Ex�?���&#x1e;h-%�8&#x18;_+�Z8J��n���H�p��Un/3�td�9-�,&#x1e;������x �M�ST��&gt;�?��&#x5;JY�N�QL�&#x1b;�C�����&#xe;��&#x14;L{��Q&lt;vA�إ&#x1b;\Z�A��N���\�q�&#x16;zF��9��T�_�V��������&#x13;s�&#x17;/�v�-�&#xe;hsu&#x11;p��&#x7;�?����j�6�F��� &#xb;��TVAL@�L�t�&#x4;�.��&#x7;���P\C4u&#x11;�&quot;vSO��H��&#x1b;��f�\�&#xb;&#x5;�sz�w��&#x13;�&#xf;���O �)r�x2H�R	&#x4;���&#x1a;�Y�&#x1b;�,�&gt;n=;���i�]r�t&#x12;%�)#6&#x5;�ꍩ&#xe;/I+�\�����.&#x1b;�A-3f�&#x17;��&#x17;�&#xb;�)�E&#x4;&gt;�&#xb;�&#x2;&#x3;�M�&#xb;�n.&#x11;T�U&#xe;|o�Đ�&#x16;�q+d&#x4;D@DD&#x15;X���h�	h����&#x10;�s�&#xe;�e��x��K�	&#x4;R�!�&amp;&lt;�h.h&lt;&#x8;8gʞN&#x1e;õZa�rV@��&#x1a;&#x8;u�Q�&#x17;m�M������&#x14;q&#xb;Fư&#x1d;6h�&#xf;�cdac���b&#x16;V�&#x1d;�S$A�A�&#x5;��*�%1&#x7f;�&#x1c;�?MK-k�-�Z&#xb;�&lt;&apos;��Ag�S�F�Ay9 q&#x5;eT��Y�5�8�ʃ&#xb;�4�9/6��&#x1d;�δ2��B�}�ڃ5��;&#x11;�&#x1e;;��P��Rnz��&#x19;.���&#x16;�&#x7;�#d�ɑ�x�g&#xb;�p�&#x15;�&#x1c;le��&#xb;���&#x8a;6;#-�6��&#xf;�5�{�&#x16;@i��&#x7f;�&#x5;&#xe;%�	��O&#x17;�gT,�&amp;&#x8;�f���ZXHt&#x11;���&#x11;؂�&#x1f;ޱ����&#x7f;���&lt;&#x5ec;|��&#x10;�.��`&#x3;�3;�� ��Q�ʇN֓&#x1b;�8�&#x6;1S&#x10;ql�&#x1f;xi�Vo���3�s$&#x5;��&amp;��*D�T�{p��0,&#x7f;d&#x10;��!q&#x2;h�&#x1f;8�&#x15;�&#x1e;�&#x1a;&#x1c;�&#x1c;Ө�E������bq�&apos;$��/&#x1;{�4�&apos;C]�&#x5;4�,�{���&#x7f;u7&gt;T�p�&#x1d;�!��אEWH�V�q�|�?� ��&#x19;��x�Y&#x15;�����W����i&#x5;�D&#x8;�&#x8;`]�&#x15;&#x1f;�&#xf;}&#xf;T��G�&#x1f;K	��(&amp;�&#xe;oX����~�Q�B&#xe;&#x1e;���q��	�� �~&quot;&#x383;�q�G�&#x1b;%�&#x17;9��F�&#x15;~/�4�4�oW�CG(�FHI&#x17;�@��:lB��d14&#x1f;e�@V&#x11;c�@�&#x12;9�|��&#x16;�bk����.�Wa06&#x7;��s&#x1;u�pPX��ES&#x1e;\O�&#x1c;&lt;auY���#S�n&#x16;�&#x1;&#x11;&#x10;&#x11;&#x11;&#x5;f7&#x14;��&#x18;��y&#xe;�&#x1a;/*��� Dq&#x530;&#x1d;a��j&#x11;&#x6;g�O��������Ѻ22O�{~��&#x10;g�&#x1;UWR\)��n�&#xc;��\PR�Jf��Η&#x1e;u%&#x10;P�&#x12;6��A&#x13;��4����Xar��&#x7f;G&lt;r1��&#xb;�E&#x9c;�)�L1��N2����7�,X�e#&#x4;Nh6�$i�Z$A�&#x11;Vbs&#x7;�&#x1b;}�,�&#x15;�5;)�lL�5�2���[&#xf;|���Z�o&#x1f;:�&#xe;#WF�&#x11;h��$i�Z4A�~���&#xe;�.�&#x16;&#x16;hW�T&#x92;��&#x3;s�ǌ�&#x8;��&#x15;�^�L�7++�h�~0�G�VS4F�a��4�h�&#x6;m����P��V&#x16;hWt4���G{��q�*J ��KS�&#x1e;��7�H!��z��������ȃ3���&apos;�_y_���8�.V^O���� (��&#x1e;�%��n��ॢ&#xc;�3U�p�-&#x7;[^�&#x5;}���&#x10;&#x2;0˶��m:V�&#x10;Wa4&#xe;�k���&lt;Z�Az�(M\mtv&#x12;3U�G&#x12;��3p��a�aa�����-}esLMn��Fӥh�&#x5;n&#x15;���&#x19;e�&#x16;&#x3;�d����&#x8;����&#x8;����&#x8;����&#x8;����&#x8;����&#x8;����&#x8;����&#x8;����&#x8;����&#x8;����</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Envioroment vatriables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="URLvar" elementType="Argument">
              <stringProp name="Argument.name">URLvar</stringProp>
              <stringProp name="Argument.value">http://ro-${ENV}.rbro.rbg.cc</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="WSvar" elementType="Argument">
              <stringProp name="Argument.name">WSvar</stringProp>
              <stringProp name="Argument.value">ro-${ENV}.rbro.rbg.cc</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Host</stringProp>
              <stringProp name="Header.value">${WSvar}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Origin</stringProp>
              <stringProp name="Header.value">${URLvar}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Referer</stringProp>
              <stringProp name="Header.value">${URLvar}/</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="RF Services Test - Contacts" enabled="true"/>
        <hashTree>
          <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Auth Service" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;password&quot;:&quot;${password}&quot;,&quot;username&quot;:&quot;${username}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">services/auth/v1/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Authorization set" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1004995836">Authorization=</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Time Stamp" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get timestamp" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">services/timestamp/v1/now</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Timestamp displayed" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="204184342">&quot;timestamp&quot;:&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="timestamp" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">timestamp</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;timestamp&quot;:\&quot;(.*?)\&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RecordingController guiclass="RecordController" testclass="RecordingController" testname="testst" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create test" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="\images\png1Test.png" elementType="HTTPFileArg">
                    <stringProp name="File.path">\images\png1Test.png</stringProp>
                    <stringProp name="File.paramname">picture</stringProp>
                    <stringProp name="File.mimetype">image/png</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="contact" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;RO40 RZBR 0000 0600 1118 5325&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[],&quot;favorite&quot;:false},&quot;name&quot;:&quot;RO40 RZBR 0000 0600 1118 5325&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">contact</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://ro-test.rbro.rbg.cc/portalserver/raiffeisen-portal/contacte</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create test 2" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--JMeterBoundary&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;RO40 RZBR 0000 0600 1118 5325&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[],&quot;favorite&quot;:false},&quot;name&quot;:&quot;RO40 RZBR 0000 0600 1118 5325&quot;}&#xd;
--JMeterBoundary&#xd;
Content-Disposition: form-data; name=&quot;picture&quot;&#xd;
&#xd;
undefined&#xd;
--JMeterBoundary--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=JMeterBoundary</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://ro-test.rbro.rbg.cc/portalserver/raiffeisen-portal/contacte</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create test 3" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="contact" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;RO40 RZBR 0000 0600 1118 5325&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[],&quot;favorite&quot;:false},&quot;name&quot;:&quot;RO40 RZBR 0000 0600 1118 5325&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">contact</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://ro-test.rbro.rbg.cc/portalserver/raiffeisen-portal/contacte</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create test 4" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&#xd;
	&quot;id&quot;:&quot;${createdContactID_Avatar_Valid_Data}&quot;,&#xd;
	&quot;name&quot;:&quot;JM-E-${editedName_Avatar_Valid_Data}&quot;,&#xd;
	&quot;alias&quot;:&quot;dorel&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;0758952645&quot;,&#xd;
	&quot;emailId&quot;:&quot;${editedEmail_Avatar_Valid_Data}@gmail.com&quot;,&#xd;
	&quot;addressLine1&quot;:&quot;-&quot;,&#xd;
	&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&#xd;
	&quot;accessContextScope&quot;:&quot;USER&quot;,&#xd;
	&quot;additions&quot;:{&quot;favorite&quot;:true,&#xd;
	&quot;customFields&quot;:[&#xd;
	{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custom field edited 1&quot;},&#xd;
	{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field edited 2&quot;}],&#xd;
	&quot;facebookUrl&quot;:&quot;-&quot;,&#xd;
	&quot;linkedinUrl&quot;:&quot;-&quot;,&#xd;
	&quot;contactUrl&quot;:&quot;-&quot;,&#xd;
	&quot;job&quot;:&quot;-&quot;,&#xd;
	&quot;birthday&quot;:&quot;2017-09-13T21:00:00&quot;}}	&#xd;
--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;picture&quot;; filename=&quot;png2Test.png&quot;&#xd;
Content-Type: image/png&#xd;
&#xd;
${base64encodedImage}&#xd;
--JmeterScriptBoundry--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=JmeterScriptBoundry</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;editedEmail_Avatar_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;editedName_Avatar_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">File folder = new File(&quot;C:\\Users\\gfleancu\\Google Drive\\Jmeter\\Tests\\images&quot;);

File[] files = folder.listFiles(new FileFilter() {
    public boolean accept(File file) {
        return file.isFile();
    }
});

for (int i=0; i &lt; files.length; i++) {
    vars.put(&quot;file_&quot; + i, files[i].getAbsolutePath());
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//import org.apache.commons.io.IOUtils
File file = new File(&quot;C:\\Users\\gfleancu\\Google Drive\\Jmeter\\Tests\\images\\png2Test.png&quot;); 
FileInputStream in = new FileInputStream(file);
ByteArrayOutputStream bos = new ByteArrayOutputStream();
byte[] buffer = new byte[1024];
for (int i; (i = in.read(buffer)) != -1; ) {
    bos.write(buffer, 0, i);
}
in.close();
byte[] imageData = bos.toByteArray();
bos.close();
vars.put(&quot;imageData&quot;, new String(imageData));


</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.commons.io.IOUtils

def imageStream = IOUtils.toByteArray(new URL(&quot;file:///C:/Users/gfleancu/Google Drive/Jmeter/Tests/images/png2Test.png&quot;))
def imageBase64 = Base64.getEncoder().encodeToString(imageStream)

vars.put(&quot;base64encodedImage&quot;,imageBase64);</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="editedEmail1" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
                <stringProp name="RegexExtractor.refname">editedEmail1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;emailId&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="editedName1" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
                <stringProp name="RegexExtractor.refname">editedName1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Contacts Service" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=JMeterBoundary</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://ro-test.rbro.rbg.cc/portalserver/raiffeisen-portal/contacte</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RecordingController guiclass="RecordController" testclass="RecordingController" testname="GET - General" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1)" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Not empty" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="91">[</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Has at least 1 contact" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1116933">&quot;id&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1) - size 1000" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="size" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1000</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">size</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Contacts" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="91">[</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Has at least 1 contact" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1116933">&quot;id&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1) - Name Query" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="query" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">JM</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Contacts" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="91">[</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Has at least 1 contact" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="73546">JM-</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <RecordingController guiclass="RecordController" testclass="RecordingController" testname="POST - Create" enabled="true"/>
            <hashTree>
              <RecordingController guiclass="RecordController" testclass="RecordingController" testname="HappyPath Tests" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - noAvatar+Valid Data" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JMeterBoundary&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;name&quot;:&quot;JM-${createdName_noAvatar_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_noAvatar_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;picture&quot;:{}}&#xd;
--JMeterBoundary--&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 4;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_noAvatar_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_noAvatar_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID created" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1432822488">{&quot;id&quot;:&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_noAvatar_Valid_Data" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_noAvatar_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - Avatar_png+Valid Data" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JMeterBoundary&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;name&quot;:&quot;JM-${createdName_Avatar_png_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_Avatar_png_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;}&#xd;
--JMeterBoundary&#xd;
Content-Disposition: form-data; name=&quot;picture&quot;; filename=&quot;png1Test.png&quot;&#xd;
Content-Type: image/png&#xd;
&#xd;
${base64encodedImage}&#xd;
--JMeterBoundary--</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_Avatar_png_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_Avatar_png_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - base64" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import org.apache.commons.io.IOUtils

def imageStream = IOUtils.toByteArray(new URL(&quot;file:///C:/Users/gfleancu/Google Drive/Jmeter/Tests/images/png1Test.png&quot;))
def imageBase64 = Base64.getEncoder().encodeToString(imageStream)

vars.put(&quot;base64encodedImage&quot;,imageBase64);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID created" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1432822488">{&quot;id&quot;:&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_Avatar_png_Valid_Data" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_Avatar_png_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - Avatar_jpg+Valid Data" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JMeterBoundary&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&quot;name&quot;:&quot;JM-${createdName_Avatar_jpg_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_Avatar_jpg_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}}&#xd;
--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;picture&quot;; filename=&quot;jpgTest2.jpg&quot;&#xd;
Content-Type: image/jpg&#xd;
&#xd;
${base64encodedImage}&#xd;
--JmeterScriptBoundry--</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_Avatar_jpg_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_Avatar_jpg_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import org.apache.commons.io.IOUtils

def imageStream = IOUtils.toByteArray(new URL(&quot;file:///C:/Users/gfleancu/Google Drive/Jmeter/Tests/images/jpgTest2.jpg&quot;))
def imageBase64 = Base64.getEncoder().encodeToString(imageStream)

vars.put(&quot;base64encodedImage&quot;,imageBase64);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID created" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1432822488">{&quot;id&quot;:&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_Avatar_jpg_Valid_Data" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_Avatar_jpg_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - Avatar_pngHR+Valid Data" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JMeterBoundary&#xd;
Content-Disposition: form-data; name=&quot;cont&quot;&#xd;
&#xd;
{&quot;name&quot;:&quot;JM-${createdName_Avatar_pngHR_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_Avatar_pngHR_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}}&#xd;
--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;picture&quot;; filename=&quot;png_bigResolution_lowSize.png&quot;&#xd;
Content-Type: image/png&#xd;
&#xd;
${base64encodedImage}&#xd;
--JmeterScriptBoundry--</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_Avatar_pngHR_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_Avatar_pngHR_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import org.apache.commons.io.IOUtils

def imageStream = IOUtils.toByteArray(new URL(&quot;file:///C:/Users/gfleancu/Google Drive/Jmeter/Tests/images/png_bigResolution_lowSize.png&quot;))
def imageBase64 = Base64.getEncoder().encodeToString(imageStream)

vars.put(&quot;base64encodedImage&quot;,imageBase64);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID created" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1432822488">{&quot;id&quot;:&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_Avatar_pngHR_Valid_Data" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_Avatar_pngHR_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <RecordingController guiclass="RecordController" testclass="RecordingController" testname="unHappyPath Tests" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - noAvatar+inValid Email" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_noAvatar_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_noAvatar_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 4;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_noAvatar_Valid_Data&quot;,randomstring1+&quot; &quot;+randomstring2);
vars.put(&quot;createdName_noAvatar_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 400" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51508">400</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -  is not a valid email" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-840908800">is not a valid email&quot;,</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_noAvatar_Valid_Data" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_noAvatar_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - noAvatar+inValid IBAN" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_noAvatar_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_noAvatar_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN***}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 4;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_noAvatar_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_noAvatar_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 400" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51508">400</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -  IBAN is not valid" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="606184403">IBAN is not valid</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_noAvatar_Valid_Data" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_noAvatar_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - Avatar+inValid Email" enabled="false">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="\images\png1Test.png" elementType="HTTPFileArg">
                        <stringProp name="File.path">\images\png1Test.png</stringProp>
                        <stringProp name="File.paramname">picture</stringProp>
                        <stringProp name="File.mimetype">image/png</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_noAvatar_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_noAvatar_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 4;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_noAvatar_Valid_Data&quot;,randomstring1+&quot; &quot;+randomstring2);
vars.put(&quot;createdName_noAvatar_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 400" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51508">400</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -  is not a valid email" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-840908800">is not a valid email&quot;,</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_noAvatar_Valid_Data" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_noAvatar_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - Avatar+inValid IBAN" enabled="false">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="\images\png1Test.png" elementType="HTTPFileArg">
                        <stringProp name="File.path">\images\png1Test.png</stringProp>
                        <stringProp name="File.paramname">picture</stringProp>
                        <stringProp name="File.mimetype">image/png</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_noAvatar_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_noAvatar_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN***}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 4;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_noAvatar_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_noAvatar_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 400" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51508">400</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -  IBAN is not valid" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="606184403">IBAN is not valid</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_noAvatar_Valid_Data" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_noAvatar_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - Avatar_jpgBIG+Valid Data" enabled="false">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="\images\jpg_bigResolution_bigSize.jpg" elementType="HTTPFileArg">
                        <stringProp name="File.path">\images\jpg_bigResolution_bigSize.jpg</stringProp>
                        <stringProp name="File.paramname">picture</stringProp>
                        <stringProp name="File.mimetype">image/jpg</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_Avatar_jpgBIG_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_Avatar_jpgBIG_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_Avatar_jpgBIG_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_Avatar_jpgBIG_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID created" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1432822488">{&quot;id&quot;:&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_Avatar_jpgBIG_Valid_Data" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_Avatar_jpgBIG_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - inValidAvatar_bmp+Valid Data" enabled="false">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="\images\bmpTest.bmp" elementType="HTTPFileArg">
                        <stringProp name="File.path">\images\bmpTest.bmp</stringProp>
                        <stringProp name="File.paramname">picture</stringProp>
                        <stringProp name="File.mimetype">image/bmp</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_inValidAvatar_bmp_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_inValidAvatar_bmp_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_inValidAvatar_bmp_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_inValidAvatar_bmp_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID created" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1432822488">{&quot;id&quot;:&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_inValidAvatar_bmp_Valid_Data" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_inValidAvatar_bmp_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - inValidAvatar_txt+Valid Data" enabled="false">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="\images\textTest.txt" elementType="HTTPFileArg">
                        <stringProp name="File.path">\images\textTest.txt</stringProp>
                        <stringProp name="File.paramname">picture</stringProp>
                        <stringProp name="File.mimetype">text/txxt</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_inValidAvatar_txt_Valid_Data}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_inValidAvatar_txt_Valid_Data}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_inValidAvatar_txt_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_inValidAvatar_txt_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID created" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1432822488">{&quot;id&quot;:&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_inValidAvatar_txt_Valid_Data" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_inValidAvatar_txt_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - inValidAvatar+inValid Email" enabled="false">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="images\textTest.txt" elementType="HTTPFileArg">
                        <stringProp name="File.path">images\textTest.txt</stringProp>
                        <stringProp name="File.paramname">picture</stringProp>
                        <stringProp name="File.mimetype">text\txt</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_inValidAvatar_inValid_email}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_inValidAvatar_inValid_email}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 4;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_ninValidAvatar_inValid_email&quot;,randomstring1+&quot; &quot;+randomstring2);
vars.put(&quot;createdName_inValidAvatar_inValid_email&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 400" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51508">400</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -  is not a valid email" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-840908800">is not a valid email&quot;,</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_noAvatar_Valid_Data" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_noAvatar_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Create Contact (v1) - inValidAvatar+inValid IBAN" enabled="false">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="images\textTest.txt" elementType="HTTPFileArg">
                        <stringProp name="File.path">images\textTest.txt</stringProp>
                        <stringProp name="File.paramname">picture</stringProp>
                        <stringProp name="File.mimetype">text\txt</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;name&quot;:&quot;JM-${createdName_inValidAvatar_inValid_iban}&quot;,&quot;alias&quot;:&quot;dorel&quot;,&quot;phoneNumber&quot;:&quot;0758952645&quot;,&quot;emailId&quot;:&quot;${createdEmail_inValidAvatar_inValid_iban}@gmail.com&quot;,&quot;addressLine1&quot;: &quot;Text for address lien 1&quot;,&quot;addressLine2&quot;: &quot;Text for address lien 2&quot;,&quot;addressLine3&quot;: &quot;Apache&quot;,&quot;addressLine4&quot;: &quot;JMeter test&quot;,&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN***}&quot;}],&quot;additions&quot;:{&quot;customFields&quot;:[{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&quot;favorite&quot;:false,&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&quot;birthday&quot;:&quot;${timestamp}&quot;,&quot;contactUrl&quot;:&quot;-&quot;,&quot;job&quot;:&quot;-&quot;},&quot;picture&quot;:{}} </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 4;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;createdEmail_inValidAvatar_inValid_iban&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;createdName_inValidAvatar_inValid_iban&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 400" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="51508">400</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -  IBAN is not valid" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="606184403">IBAN is not valid</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="createdContactID_noAvatar_Valid_Data" enabled="false">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">createdContactID_noAvatar_Valid_Data</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <RecordingController guiclass="RecordController" testclass="RecordingController" testname="GET - Specific" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1) - created - noAvatar+Valid Data" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_noAvatar_Valid_Data}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - doesn&apos;t contain pictureUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1565071471">pictureUrl</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1094108549">&quot;name&quot;:&quot;JM-${createdName_noAvatar_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1653098489">&quot;emailId&quot;:&quot;${createdEmail_noAvatar_Valid_Data}@gmail.com&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1273077523">&quot;id&quot;:&quot;${createdContactID_noAvatar_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1) - created - Avatar_png+Valid Data" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_Avatar_png_Valid_Data}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1436595332">&quot;id&quot;:&quot;${createdContactID_Avatar_png_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-163718722">&quot;emailId&quot;:&quot;${createdEmail_Avatar_png_Valid_Data}@gmail.com&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - contain pictureUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1039034859">png1Test.png</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="30256356">&quot;name&quot;:&quot;JM-${createdName_Avatar_png_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1) - created - Avatar_jpg+Valid Data" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_Avatar_jpg_Valid_Data}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1391878452">&quot;id&quot;:&quot;${createdContactID_Avatar_jpg_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-209288954">&quot;emailId&quot;:&quot;${createdEmail_Avatar_jpg_Valid_Data}@gmail.com&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1436237156">&quot;name&quot;:&quot;JM-${createdName_Avatar_jpg_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - contain pictureUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-878038030">jpgTest2.jpg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1) - created - Avatar_pngHR+Valid Data" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_Avatar_pngHR_Valid_Data}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1427334854">&quot;id&quot;:&quot;${createdContactID_Avatar_pngHR_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - email" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="210220532">&quot;emailId&quot;:&quot;${createdEmail_Avatar_pngHR_Valid_Data}@gmail.com&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Name" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1972433362">&quot;name&quot;:&quot;JM-${createdName_Avatar_pngHR_Valid_Data}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - contain pictureUrl" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1743871399">png_bigResolution_lowSize.png</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Get Contacts (v1) - specific - invalid Contact ID" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/79692bf8-jmgt-428e-88cd-0ec003834869</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51512">404</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - invalid id message" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="325280258">Contact with the specified id is not available for the user !&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <RecordingController guiclass="RecordController" testclass="RecordingController" testname="PUT - Update" enabled="true"/>
            <hashTree>
              <RecordingController guiclass="RecordController" testclass="RecordingController" testname="HappyPath Tests - No Initial Avatar" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** UpdateContact (v1) - noFavoriteChange_validEdits_noiAvatar_noAvatarAdd" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&#xd;
	&quot;id&quot;:&quot;${createdContactID_noAvatar_Valid_Data}&quot;,&#xd;
	&quot;name&quot;:&quot;JM-E-${editedName_noFavoriteChange_validEdits_noiAvatar_noAvatarAdd}&quot;,&#xd;
	&quot;alias&quot;:&quot;dorel&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;0758952645&quot;,&#xd;
	&quot;emailId&quot;:&quot;${editedEmail_noFavoriteChange_validEdits_noiAvatar_noAvatarAdd}@gmail.com&quot;,&#xd;
	&quot;addressLine1&quot;:&quot;-&quot;,&#xd;
	&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&#xd;
	&quot;accessContextScope&quot;:&quot;USER&quot;,&#xd;
	&quot;additions&quot;:{&quot;favorite&quot;:false,&#xd;
	&quot;customFields&quot;:[&#xd;
	{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custom field edited 1&quot;},&#xd;
	{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field edited 2&quot;}],&#xd;
	&quot;facebookUrl&quot;:&quot;-&quot;,&#xd;
	&quot;linkedinUrl&quot;:&quot;-&quot;,&#xd;
	&quot;contactUrl&quot;:&quot;-&quot;,&#xd;
	&quot;job&quot;:&quot;-&quot;,&#xd;
	&quot;birthday&quot;:&quot;2017-09-13T21:00:00&quot;}}	&#xd;
--JmeterScriptBoundry--</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_noAvatar_Valid_Data}</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data; boundary=JmeterScriptBoundry</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;editedEmail_noFavoriteChange_validEdits_noiAvatar_noAvatarAdd&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;editedName_noFavoriteChange_validEdits_noiAvatar_noAvatarAdd&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1273077523">&quot;id&quot;:&quot;${createdContactID_noAvatar_Valid_Data}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - email" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-2026322651">&quot;emailId&quot;:&quot;${editedEmail_noFavoriteChange_validEdits_noiAvatar_noAvatarAdd}@gmail.com&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Name" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1429744979">&quot;name&quot;:&quot;JM-E-${editedName_noFavoriteChange_validEdits_noiAvatar_noAvatarAdd}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** UpdateContact (v1) - AddToFavoriteChange_validEdits_noiAvatar_noAvatarAdd" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&#xd;
	&quot;id&quot;:&quot;${createdContactID_noAvatar_Valid_Data}&quot;,&#xd;
	&quot;name&quot;:&quot;JM-E-${editedName_AddToFavoriteChange_validEdits_noiAvatar_noAvatarAdd}&quot;,&#xd;
	&quot;alias&quot;:&quot;dorel&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;0758952645&quot;,&#xd;
	&quot;emailId&quot;:&quot;${editedEmail_AddToFavoriteChange_validEdits_noiAvatar_noAvatarAdd}@gmail.com&quot;,&#xd;
	&quot;addressLine1&quot;:&quot;-&quot;,&#xd;
	&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&#xd;
	&quot;accessContextScope&quot;:&quot;USER&quot;,&#xd;
	&quot;additions&quot;:{&quot;favorite&quot;:true,&#xd;
	&quot;customFields&quot;:[&#xd;
	{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custom field edited 1&quot;},&#xd;
	{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field edited 2&quot;}],&#xd;
	&quot;facebookUrl&quot;:&quot;-&quot;,&#xd;
	&quot;linkedinUrl&quot;:&quot;-&quot;,&#xd;
	&quot;contactUrl&quot;:&quot;-&quot;,&#xd;
	&quot;job&quot;:&quot;-&quot;,&#xd;
	&quot;birthday&quot;:&quot;2017-09-13T21:00:00&quot;}}	&#xd;
--JmeterScriptBoundry--</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_noAvatar_Valid_Data}</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data; boundary=JmeterScriptBoundry</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;editedEmail_AddToFavoriteChange_validEdits_noiAvatar_noAvatarAdd&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;editedName_AddToFavoriteChange_validEdits_noiAvatar_noAvatarAdd&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Name" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-215501936">&quot;name&quot;:&quot;JM-E-${editedName_AddToFavoriteChange_validEdits_noiAvatar_noAvatarAdd}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - email" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-174600870">&quot;emailId&quot;:&quot;${editedEmail_AddToFavoriteChange_validEdits_noiAvatar_noAvatarAdd}@gmail.com&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1273077523">&quot;id&quot;:&quot;${createdContactID_noAvatar_Valid_Data}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Favorited?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="792973092">&quot;favorite&quot;:true</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** UpdateContact (v1) - RemoveFavoriteChange_validEdits_noiAvatar_noAvatarAdd" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&#xd;
	&quot;id&quot;:&quot;${createdContactID_noAvatar_Valid_Data}&quot;,&#xd;
	&quot;name&quot;:&quot;JM-E-${editedName_removeFavoriteChange_validEdits_noiAvatar_noAvatarAdd}&quot;,&#xd;
	&quot;alias&quot;:&quot;dorel&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;0758952645&quot;,&#xd;
	&quot;emailId&quot;:&quot;${editedEmail_removeFavoriteChange_validEdits_noiAvatar_noAvatarAdd}@gmail.com&quot;,&#xd;
	&quot;addressLine1&quot;:&quot;-&quot;,&#xd;
	&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&#xd;
	&quot;accessContextScope&quot;:&quot;USER&quot;,&#xd;
	&quot;additions&quot;:{&quot;favorite&quot;:false,&#xd;
	&quot;customFields&quot;:[&#xd;
	{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custom field edited 1&quot;},&#xd;
	{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field edited 2&quot;}],&#xd;
	&quot;facebookUrl&quot;:&quot;-&quot;,&#xd;
	&quot;linkedinUrl&quot;:&quot;-&quot;,&#xd;
	&quot;contactUrl&quot;:&quot;-&quot;,&#xd;
	&quot;job&quot;:&quot;-&quot;,&#xd;
	&quot;birthday&quot;:&quot;2017-09-13T21:00:00&quot;}}	&#xd;
--JmeterScriptBoundry--</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_noAvatar_Valid_Data}</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data; boundary=JmeterScriptBoundry</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;editedEmail_removeFavoriteChange_validEdits_noiAvatar_noAvatarAdd&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;editedName_removeFavoriteChange_validEdits_noiAvatar_noAvatarAdd&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Name" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-62902634">&quot;name&quot;:&quot;JM-E-${editedName_removeFavoriteChange_validEdits_noiAvatar_noAvatarAdd}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - email" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-161148798">&quot;emailId&quot;:&quot;${editedEmail_removeFavoriteChange_validEdits_noiAvatar_noAvatarAdd}@gmail.com&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ID" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1273077523">&quot;id&quot;:&quot;${createdContactID_noAvatar_Valid_Data}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion -  removed favorite?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1201081779">&quot;favorite&quot;:false</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <RecordingController guiclass="RecordController" testclass="RecordingController" testname="unHappyPath Tests - No Initial Avatar" enabled="true"/>
              <hashTree/>
              <RecordingController guiclass="RecordController" testclass="RecordingController" testname="HappyPath Tests - Initial Avatar" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** UpdateContact (v1) - Favorite + Fields edits  - Avatar+Valid Data" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;contact&quot;&#xd;
&#xd;
{&#xd;
	&quot;id&quot;:&quot;${createdContactID_Avatar_Valid_Data}&quot;,&#xd;
	&quot;name&quot;:&quot;JM-E-${editedName_Avatar_Valid_Data}&quot;,&#xd;
	&quot;alias&quot;:&quot;dorel&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;0758952645&quot;,&#xd;
	&quot;emailId&quot;:&quot;${editedEmail_Avatar_Valid_Data}@gmail.com&quot;,&#xd;
	&quot;addressLine1&quot;:&quot;-&quot;,&#xd;
	&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&#xd;
	&quot;accessContextScope&quot;:&quot;USER&quot;,&#xd;
	&quot;additions&quot;:{&quot;favorite&quot;:true,&#xd;
	&quot;customFields&quot;:[&#xd;
	{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custom field edited 1&quot;},&#xd;
	{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field edited 2&quot;}],&#xd;
	&quot;facebookUrl&quot;:&quot;-&quot;,&#xd;
	&quot;linkedinUrl&quot;:&quot;-&quot;,&#xd;
	&quot;contactUrl&quot;:&quot;-&quot;,&#xd;
	&quot;job&quot;:&quot;-&quot;,&#xd;
	&quot;birthday&quot;:&quot;2017-09-13T21:00:00&quot;}}	&#xd;
--JmeterScriptBoundry&#xd;
Content-Disposition: form-data; name=&quot;picture&quot;; filename=&quot;png2Test.png&quot;&#xd;
Content-Type: image/png&#xd;
&#xd;
${base64encodedImage}&#xd;
--JmeterScriptBoundry--</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID_Avatar_Valid_Data}</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data; boundary=JmeterScriptBoundry</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate random Name and Email" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import java.util.Random;

chars = &quot;0123456789-ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz&quot;;
int string_length1 = 3;
randomstring1 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring1 += chars.substring(randomInt,randomInt+1);               
    }
int string_length2 = 4;
randomstring2 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring2 += chars.substring(randomInt,randomInt+1);               
    }
int string_length3 = 3;
randomstring3 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring3 += chars.substring(randomInt,randomInt+1);               
    }
int string_length4 = 7;
randomstring4 =&quot;&quot;;
    for (int i=0; i&lt;string_length1; i++) {
        Random randomGenerator = new Random();
      int randomInt = randomGenerator.nextInt(chars.length());
        randomstring4 += chars.substring(randomInt,randomInt+1);               
    }
vars.put(&quot;editedEmail_Avatar_Valid_Data&quot;,randomstring1+&quot;.&quot;+randomstring2);
vars.put(&quot;editedName_Avatar_Valid_Data&quot;,randomstring3+&quot; &quot;+randomstring4);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">File folder = new File(&quot;C:\\Users\\gfleancu\\Google Drive\\Jmeter\\Tests\\images&quot;);

File[] files = folder.listFiles(new FileFilter() {
    public boolean accept(File file) {
        return file.isFile();
    }
});

for (int i=0; i &lt; files.length; i++) {
    vars.put(&quot;file_&quot; + i, files[i].getAbsolutePath());
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">//import org.apache.commons.io.IOUtils
File file = new File(&quot;C:\\Users\\gfleancu\\Google Drive\\Jmeter\\Tests\\images\\png2Test.png&quot;); 
FileInputStream in = new FileInputStream(file);
ByteArrayOutputStream bos = new ByteArrayOutputStream();
byte[] buffer = new byte[1024];
for (int i; (i = in.read(buffer)) != -1; ) {
    bos.write(buffer, 0, i);
}
in.close();
byte[] imageData = bos.toByteArray();
bos.close();
vars.put(&quot;imageData&quot;, new String(imageData));


</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">import org.apache.commons.io.IOUtils

def imageStream = IOUtils.toByteArray(new URL(&quot;file:///C:/Users/gfleancu/Google Drive/Jmeter/Tests/images/png2Test.png&quot;))
def imageBase64 = Base64.getEncoder().encodeToString(imageStream)

vars.put(&quot;base64encodedImage&quot;,imageBase64);</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="editedEmail1" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
                    <stringProp name="RegexExtractor.refname">editedEmail1</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;emailId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="editedName1" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
                    <stringProp name="RegexExtractor.refname">editedName1</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** UpdateContact (v1) - Remove Favorite + Fields edits" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="contact" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{
	&quot;id&quot;:&quot;${createdContactID}&quot;,
	&quot;name&quot;:&quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)} ${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}&quot;,
	&quot;alias&quot;:&quot;dorel&quot;,
	&quot;phoneNumber&quot;:&quot;0758952645&quot;,
	&quot;emailId&quot;:&quot;${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@gmail.com&quot;,
	&quot;addressLine1&quot;:&quot;-&quot;,
	&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],
	&quot;accessContextScope&quot;:&quot;USER&quot;,
	&quot;additions&quot;:{&quot;favorite&quot;:false,
	&quot;customFields&quot;:[
	{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field edited thied time&quot;}],
	&quot;facebookUrl&quot;:&quot;-&quot;,
	&quot;linkedinUrl&quot;:&quot;-&quot;,
	&quot;contactUrl&quot;:&quot;-&quot;,
	&quot;job&quot;:&quot;-&quot;,
	&quot;birthday&quot;:&quot;2017-09-13T21:00:00&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contact</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID}</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryq9BRAOUtjG6wpUka</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="editedEmail2" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
                    <stringProp name="RegexExtractor.refname">editedEmail2</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;emailId&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="editedName2" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
                    <stringProp name="RegexExtractor.refname">editedName2</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <RecordingController guiclass="RecordController" testclass="RecordingController" testname="unHappyPath Tests - Initial Avatar" enabled="true"/>
              <hashTree/>
            </hashTree>
            <RecordingController guiclass="RecordController" testclass="RecordingController" testname="DELETE - Delete" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** Delete Contact (v1)" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/contacts-service/v1/contacts/${createdContactID}</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <RecordingController guiclass="RecordController" testclass="RecordingController" testname="POST - Validate" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="***${username}*** ValidateContact (v1)" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;${createdContactID}&quot;,&#xd;
	&quot;name&quot;:&quot;${editedName2}&quot;,&#xd;
	&quot;alias&quot;:&quot;dorel&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;0758952645&quot;,&#xd;
	&quot;emailId&quot;:&quot;${editedEmail2}&quot;,&#xd;
	&quot;addressLine1&quot;: &quot;Text for address liene 1&quot;,&#xd;
     &quot;addressLine2&quot;: &quot;Text for address liene 2&quot;,&#xd;
     &quot;addressLine3&quot;: &quot;Apache&quot;,&#xd;
     &quot;addressLine4&quot;: &quot;JMeter test&quot;,&#xd;
	&quot;accounts&quot;:[{&quot;IBAN&quot;:&quot;${testIBAN}&quot;}],&#xd;
	&quot;additions&quot;:{&quot;customFields&quot;:[&#xd;
	{&quot;name&quot;:&quot;custom field 1&quot;,&quot;value&quot;:&quot;val custiom field 1&quot;},&#xd;
	{&quot;name&quot;:&quot;csutom field 2&quot;,&quot;value&quot;:&quot;val custom field 2&quot;}],&#xd;
	&quot;favorite&quot;:false,&#xd;
	&quot;facebookUrl&quot;:&quot;facebook.facebook&quot;,&#xd;
	&quot;linkedinUrl&quot;:&quot;linkedin.linkedin&quot;,&#xd;
	&quot;birthday&quot;:&quot;${timestamp}&quot;,&#xd;
	&quot;contactUrl&quot;:&quot;-&quot;,&#xd;
	&quot;job&quot;:&quot;-&quot;}&#xd;
	}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${WSvar}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services//contacts-service/v1/contacts/validate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>false</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <hostname>true</hostname>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - Fails" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <hostname>true</hostname>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">8081</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
